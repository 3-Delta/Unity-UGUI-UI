// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GM.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Logic.Hotfix.Fixed.Pbf {

  #region Messages
  public sealed class CSGM : pb::IMessage {
    private static readonly pb::MessageParser<CSGM> _parser = new pb::MessageParser<CSGM>(() => new CSGM());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGM> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetRoleId" field.</summary>
    public const int TargetRoleIdFieldNumber = 1;
    private ulong targetRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetRoleId {
      get { return targetRoleId_; }
      set {
        targetRoleId_ = value;
      }
    }

    /// <summary>Field number for the "gmCmd" field.</summary>
    public const int GmCmdFieldNumber = 2;
    private string gmCmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GmCmd {
      get { return gmCmd_; }
      set {
        gmCmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TargetRoleId);
      }
      if (GmCmd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GmCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetRoleId);
      }
      if (GmCmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GmCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetRoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            GmCmd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SCGM : pb::IMessage {
    private static readonly pb::MessageParser<SCGM> _parser = new pb::MessageParser<SCGM>(() => new SCGM());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGM> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSGMs : pb::IMessage {
    private static readonly pb::MessageParser<CSGMs> _parser = new pb::MessageParser<CSGMs>(() => new CSGMs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGMs> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetRoleId" field.</summary>
    public const int TargetRoleIdFieldNumber = 1;
    private ulong targetRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetRoleId {
      get { return targetRoleId_; }
      set {
        targetRoleId_ = value;
      }
    }

    /// <summary>Field number for the "gmCmds" field.</summary>
    public const int GmCmdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_gmCmds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> gmCmds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GmCmds {
      get { return gmCmds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TargetRoleId);
      }
      gmCmds_.WriteTo(output, _repeated_gmCmds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetRoleId);
      }
      size += gmCmds_.CalculateSize(_repeated_gmCmds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetRoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            gmCmds_.AddEntriesFrom(input, _repeated_gmCmds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
